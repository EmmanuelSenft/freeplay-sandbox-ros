#!/usr/bin/env python
"""
Listens for a trajectory to write and sends it to the nao via naoqi SDK.

Requires a running robot/simulation with ALNetwork proxies.

"""
from naoqi import ALModule, ALBroker, ALProxy
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path
from std_msgs.msg import String, Empty
import rospy
import tf
import motion
import numpy
import math
import random
import threading
import signal
import sys

def look_at(targetpose):
    reference_frame = "torso"
    try:
        targetpose.header.stamp = tl.getLatestCommonTime(targetpose.header.frame_id,reference_frame)
        pose = tl.transformPose(reference_frame, targetpose)
        target = [pose.pose.position.x,pose.pose.position.y,pose.pose.position.z]
        trackerProxy.lookAt(target, 0, .3, False)
    except:
        return

def point_at(targetpose):
    reference_frame = "torso"
    try:
        targetpose.header.stamp = tl.getLatestCommonTime(targetpose.header.frame_id,reference_frame)
        pose = tl.transformPose(reference_frame, targetpose)
        target = [pose.pose.position.x,pose.pose.position.y,pose.pose.position.z]
        trackerProxy.pointAt(effector, target, 0, .3)
        pub_event.publish(String("pointing_finished"))
    except:
        return

def waiting():
    try:
        postureProxy.goToPosture("Stand", 0.5)
        motionProxy.setBreathEnabled("Body",True)
        trackerProxy.lookAt([1,0,.2], 0, .1,False)
        trackerProxy.track("Face")
        ledProxy.fadeRGB("FaceLeds",1,1,1,.1)
    except:
        return

def on_blink(message):
    ledProxy.fade("FaceLeds",0,.1)
    ledProxy.fade("FaceLeds",1,.1)

def on_event(message):
    if message.data == "motion_finished" or message.data == "att_finished":
        waiting()

def on_pose(pose):
    threading.Thread(target=point_at,args=(pose,)).start()
    look_at(pose)

def on_blocking_speech(sentence):
    pub_event.publish(String("blocking_speech_started-"+sentence.data))
    ttsProxy.say(sentence.data)
    pub_event.publish(String("blocking_speech_finished-"+sentence.data))

def signal_handler(signal, frame):
    rospy.signal_shutdown("press ctrl-c")

if __name__ == "__main__":
    rospy.init_node("nao_behaviours");
    
    POSES_TOPIC = rospy.get_param('~poses_output_topic','poses')
    NAO_IP = rospy.get_param('~nao_ip','127.0.0.1')
    port = 9559
    NAO_HANDEDNESS = rospy.get_param('~nao_handedness','right')
    if(NAO_HANDEDNESS.lower()=='right'):
        effector   = "RArm"
    elif(NAO_HANDEDNESS.lower()=='left'):
        effector = "LArm"
    else: 
        rospy.logerr('error in handedness param')

    pub_speech = rospy.Publisher("/speech", String, queue_size=5)
    pub_event = rospy.Publisher("/nao/events", String, queue_size=5)
    sub_blocking_speech = rospy.Subscriber("/nao/blocking_speech", String, on_blocking_speech, queue_size=5)
    sub_event = rospy.Subscriber("/nao/events", String, on_event)
    sub_blink = rospy.Subscriber("/nao/blink", Empty, on_blink)

    motionProxy = ALProxy("ALMotion", NAO_IP, port);
    memoryProxy = ALProxy("ALMemory", NAO_IP, port);
    ttsProxy = ALProxy("ALTextToSpeech", NAO_IP, port);
    postureProxy = ALProxy("ALRobotPosture", NAO_IP, port)
    trackerProxy = ALProxy("ALTracker", NAO_IP, port)
    ledProxy = ALProxy("ALLeds", NAO_IP, port)
    
    motionProxy.setBreathConfig([["Bpm", 6], ["Amplitude", 0.9]])
    motionProxy.setBreathEnabled("Body",False)
    trackerProxy.registerTarget("Face",.2)
    ledProxy.fadeRGB("FaceLeds",1,1,1,.1)

    motionProxy.wakeUp()
    postureProxy.goToPosture("Stand", 0.5)
    trackerProxy.lookAt([0.5,0,-.2],0,.1,False)

    tl = tf.TransformListener()

    ### Check the robot is launched and properly localised wrt the sandtray
    while not rospy.is_shutdown():
        try:
            t = tl.getLatestCommonTime("odom", "sandtray")
            if tl.canTransform("odom", "sandtray",t):
                rospy.loginfo("Ok! Starting robot behaviours.")
                pub_speech.publish(String("Ready to go!"))
                break
            else:
                rospy.logwarn("No transform robot->sandtray. Robot not yet localised!")
        except:
            rospy.logwarn("No transform robot->sandtray. Robot not yet localised!")

        rospy.sleep(0.5)

    sub_poses = rospy.Subscriber(POSES_TOPIC, PoseStamped, on_pose, queue_size=1) 
    motionProxy.setBreathEnabled("Body",True)
    waiting()

    r = rospy.Rate(2)

    while not rospy.is_shutdown():
        r.sleep()

    motionProxy.setBreathEnabled("Body",False)
    trackerProxy.stopTracker()
