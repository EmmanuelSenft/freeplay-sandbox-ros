#!/usr/bin/env python
"""
Listens for a trajectory to write and sends it to the nao via naoqi SDK.

Requires a running robot/simulation with ALNetwork proxies.

"""
from naoqi import ALModule, ALBroker, ALProxy
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path
from std_msgs.msg import String, Empty
import rospy
import tf
import motion
import numpy
import math
import random
import threading
import signal
import sys

class Module(object):
    def __init__(self, ip, port, effector):
        self._ip = ip
        self._port = port
        self._effector = effector

        self._pub_event = rospy.Publisher("/nao/events", String, queue_size=5)
        self._sub_blocking_speech = rospy.Subscriber("/nao/blocking_speech", String, self.on_blocking_speech, queue_size=5)
        self._sub_event = rospy.Subscriber("/nao/events", String, self.on_event)
        self._sub_blink = rospy.Subscriber("/nao/blink", Empty, self.on_blink)

        self.create_proxies()   

        self._motionProxy.setBreathConfig([["Bpm", 6], ["Amplitude", 0.9]])
        self._motionProxy.setBreathEnabled("Body",False)
        self._trackerProxy.registerTarget("Face",.2)
        self._ledProxy.fadeRGB("FaceLeds",1,1,1,.1)

        self._motionProxy.wakeUp()
        self._postureProxy.goToPosture("Stand", 0.5)
        self._trackerProxy.lookAt([0.5,0,-.2],0,.1,False)

        self._tl = tf.TransformListener()
        self._standing = False

        ### Check the robot is launched and properly localised wrt the sandtray
        while not rospy.is_shutdown():
            try:
                t = self._tl.getLatestCommonTime("odom", "sandtray")
                if self._tl.canTransform("odom", "sandtray",t):
                    rospy.loginfo("Ok! Starting robot behaviours.")
                    self._ttsProxy.say("Ready to go!")
                    break
                else:
                    rospy.logwarn("No transform robot->sandtray. Robot not yet localised!")
            except:
                rospy.logwarn("No transform robot->sandtray. Robot not yet localised!")

            rospy.sleep(0.5)

        self._sub_poses = rospy.Subscriber("poses", PoseStamped, self.on_pose, queue_size=1) 
        self._motionProxy.setBreathEnabled("Body",True)
        self.waiting()

        r = rospy.Rate(2)

        while not rospy.is_shutdown():
            r.sleep()

        self._motionProxy.setBreathEnabled("Body",False)
        self._trackerProxy.stopTracker()

    def look_at(self, targetpose):
        if self._standing:
            return
        reference_frame = "torso"
        try:
            self._trackerProxy.stopTracker()
            targetpose.header.stamp = self._tl.getLatestCommonTime(targetpose.header.frame_id,reference_frame)
            pose = self._tl.transformPose(reference_frame, targetpose)
            target = [pose.pose.position.x,pose.pose.position.y,pose.pose.position.z]
        except:
            print "error poses"
            return
        try:
            self._trackerProxy.lookAt(target, 0, .3, False)
        except:
            try:
                print "look error proxy destroyed"
                self.create_proxies()
                self._trackerProxy.lookAt(target, 0, .3, False)
            except:
                print "error cannot recreate proxy"
                return
            return

    def point_at(self, targetpose):
        if self._standing:
            return
        reference_frame = "torso"
        try:
            targetpose.header.stamp = self._tl.getLatestCommonTime(targetpose.header.frame_id,reference_frame)
            pose = self._tl.transformPose(reference_frame, targetpose)
            target = [pose.pose.position.x,pose.pose.position.y,pose.pose.position.z]
            print "point"
            print target
        except:
            print "error poses"
            return
        try:
            self._trackerProxy.pointAt(effector, target, 0, .3)
            self._pub_event.publish(String("pointing_finished"))
        except:
            try:
                print "point error proxy destroyed"
                self.create_proxies()
                self._trackerProxy.pointAt(effector, target, 0, .3)
                self._pub_event.publish(String("pointing_finished"))
            except:
                print "error cannot recreate proxy"
                self._pub_event.publish(String("pointing_failed"))
                return
            return

    def waiting(self):
        try:
            self._standing = True
            self._postureProxy.goToPosture("Stand", 0.5)
            self._standing = False
            self._trackerProxy.lookAt([1,0,.2], 0, .1,False)
            self._trackerProxy.track("Face")
        except:
            try:
                print "wait error proxy destroyed"
                self.create_proxies()
            except:
                print "error cannot recreate proxy"
                return
            return

    def on_blink(self, message):
        try:
            self._ledProxy.fade("FaceLeds",0,.1)
            self._ledProxy.fade("FaceLeds",1,.1)
        except:
            try:
                print "blink error proxy destroyed"
                self.create_proxies()
            except:
                print "error cannot recreate proxy"
                return
            return


    def on_event(self, message):
        if message.data == "motion_finished" or message.data == "att_finished":
            self.waiting()

    def on_pose(self, pose):
        threading.Thread(target=self.point_at,args=(pose,)).start()
        self.look_at(pose)

    def on_blocking_speech(self, sentence):
        self._pub_event.publish(String("blocking_speech_started-"+sentence.data))
        try:
            self._ttsProxy.say(sentence.data)
        except:
            try:
                print "say error proxy destroyed"
                self.create_proxies()
                self._ttsProxy.say(sentence.data)
            except:
                print "error cannot recreate proxy"

        self._pub_event.publish(String("blocking_speech_finished-"+sentence.data))

    def create_proxies(self):
        self._motionProxy = ALProxy("ALMotion", self._ip, self._port);
        self._memoryProxy = ALProxy("ALMemory", self._ip, self._port);
        self._ttsProxy = ALProxy("ALTextToSpeech", self._ip, self._port);
        self._postureProxy = ALProxy("ALRobotPosture", self._ip, self._port)
        self._trackerProxy = ALProxy("ALTracker", self._ip, self._port)
        self._ledProxy = ALProxy("ALLeds", self._ip, self._port)

def signal_handler(signal, frame):
    rospy.signal_shutdown("press ctrl-c")


if __name__ == "__main__":
    rospy.init_node("nao_behaviours");
    
    ip = rospy.get_param('~nao_ip','127.0.0.1')
    port = 9559
    NAO_HANDEDNESS = rospy.get_param('~nao_handedness','right')
    if(NAO_HANDEDNESS.lower()=='right'):
        effector   = "RArm"
    elif(NAO_HANDEDNESS.lower()=='left'):
        effector = "LArm"
    else: 
        rospy.logerr('error in handedness param')

    module = Module(ip,port, effector)

