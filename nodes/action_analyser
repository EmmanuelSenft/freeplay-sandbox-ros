#!/usr/bin/env python
import numpy
import random
import signal
import sys

import math
import rospy
import tf
from threading import Event, Lock, Timer
import actionlib

from geometry_msgs.msg import PoseStamped, Point
from std_msgs.msg import String, Float32MultiArray
from visualization_msgs.msg import MarkerArray, Marker
from freeplay_sandbox_msgs.msg import ListIntStamped

MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"

ITEMS = ["zebra","elephant","leopard","lion","giraffe","rhino","crocodile","hippo","toychild1","toychild4"]
ACTION_TYPES = ["move"]

class ActionAnalyser(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

        self._event_sub = rospy.Subscriber("events", String, self.on_event)
        self._goal_sub = rospy.Subscriber("goal", PoseStamped, self.on_goal)
        self._zones_sub = rospy.Subscriber("zones", MarkerArray, self.on_zones)

        self._state_pub = rospy.Publisher("actions", ListIntStamped, queue_size = 5)

        self._zones={}
        self._zone_types = set()
        self._zoneslock = Lock()

        
        #self.get_state()

    def on_goal(self, movementPose):
        item = movementPose.header.frame_id

        pose = self.get_pose(item)
        if pose is None:
            return

        item_id = ITEMS.index(item)
        origin = self.isin_zone(pose)

        pose = self._tl.transformPose("sandtray", movementPose)
        pose = pose.pose.position
        destination = self.isin_zone((pose.x,pose.y))

        print str(item_id) + " " + str(origin) + " " + str(destination)
        self.publish_action(ACTION_TYPES.index("move"),item_id, 100*destination[0]+destination[1])

    def isin_zone(self,pose):
        pose = pose[0], pose[1]
        index = [0]
        for idx, zone_type in enumerate(self._zone_types):
            if self.isin(pose, self._zones[zone_type],index):
                return idx, index[0]
        return -1,-1
   
    def publish_action(self, action_type, action_object, action_target):
        message = ListIntStamped()
        message.header.frame_id = REFERENCE_FRAME
        message.header.stamp = rospy.Time(0)
        message.data.append(action_type)
        message.data.append(action_object)
        message.data.append(action_target)
        self._state_pub.publish(message)
        pass


    def get_pose(self, item, reference=REFERENCE_FRAME):
        if item not in self._tl.getFrameStrings():
            rospy.logwarn_throttle(20,"%s is not yet published." % item)
            return None
        if self._tl.canTransform(reference, item, rospy.Time(0)):
            (trans,rot) = self._tl.lookupTransform(reference, item, rospy.Time(0))
            return trans
        return None

    def isin(self, point, polygons, index=[0]):
        if point is None:
            return False

        x,y = point

        for idx, polygon in enumerate(polygons):
            n = len(polygon)
            inside = False

            p1x,p1y = polygon[0]
            for i in range (1,n+1):
                p2x,p2y = polygon[i % n]
                if y > min(p1y,p2y):
                    if y <= max(p1y,p2y):
                        if x <= max(p1x,p2x):
                            if p1y != p2y:
                                xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                                if p1x == p2x or x <= xinters:
                                    inside = not inside
                p1x,p1y = p2x,p2y
            if inside:
                index[0] = idx
                return True
        return False


    def run(self):
        rospy.spin()

    def on_event(self, event):
        pass

    def on_zones(self, zones):
        self._zoneslock.acquire()
        self._zones.clear()
        for zone in zones.markers:
            if zone.action == Marker.ADD:
                name = zone.ns.split("_")[-1]
                self._zone_types.add(name)
                rospy.loginfo("Adding/updating a %s zone" % name)
                self._zones.setdefault(name, []).append([(p.x,p.y) for p in zone.points])

        self._zoneslock.release()

if __name__ == "__main__":

    rospy.init_node('action_analyser')

    rospy.loginfo("Initializing TF...")
    analyser= ActionAnalyser()
    analyser.run()
