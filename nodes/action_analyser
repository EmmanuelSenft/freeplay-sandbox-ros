#!/usr/bin/env python
import numpy as np
import numpy.ma as ma
import random
import signal
import sys

import math
import rospy
import tf
from threading import Event, Lock, Timer
import actionlib
from state_analyser import StateAnalyser

from geometry_msgs.msg import PoseStamped, Point
from std_msgs.msg import String, Float32MultiArray
from visualization_msgs.msg import MarkerArray, Marker
from freeplay_sandbox_msgs.msg import ContinuousAction, DiscreteAction

MAP_HEIGHT=0.335

DEBUG = False

REFERENCE_FRAME="/sandtray"
ACTION_ATTENTION = "att"
ACTION_ENCOURAGEMENT = "encour"
ACTION_FELICITATION = "congrats"
ACTION_RULES = "rul"
ACTION_MOVE_TO = "mvt"
ACTION_MOVE_CLOSE = "mvc"
ACTION_MOVE_AWAY = "mva"

THRESHOLD_MOVE_TO = 0.001

class ActionAnalyser(object):
    def __init__(self):

        self._event_sub = rospy.Subscriber("sandtray/interaction_events", String, self.on_event)
        self._selected_action_sub = rospy.Subscriber("sparc/selected_action",ContinuousAction , self.on_selected_action)

        self._proposed_action_sub = rospy.Subscriber("sparc/proposed_action_dis",DiscreteAction, self.on_action_proposed)
        self._rewarded_action_pub = rospy.Publisher("sparc/rewarded_action_dis", DiscreteAction, queue_size = 5)

        self._proposed_action_pub = rospy.Publisher("sparc/proposed_action", ContinuousAction, queue_size = 5)

        self._state_analyser = StateAnalyser()
        self._proposing_action = False
        
        self._actions = []

        if DEBUG:
            Timer(1, self.test).start()

    def test(self):
        a = DiscreteAction()
        a.data=np.zeros(10,dtype = int)
        a.data[2]=-1
        a.data[3]=-1
        a.data[4]=SPATIAL_THING.index("giraffe")
        a.data[6]=SPATIAL_THING.index("hippo")
        a.maskAction = np.ones(10,dtype = bool)
        a.maskAction[6]=True
        a.maskAction[7]=False
        a.maskAction[2]=False
        a.maskAction[8]=False
        a.maskAction[9]=False
        self.on_action_proposed(a)

    def on_action_proposed(self, message):
        print "got action"
        if len(self._actions) == 0:
            if not self.init_actions():
                return 
        if self._proposing_action:
            return
        
        if DEBUG:
            print message.data
            print message.maskAction
        state_mask = message.state_mask
        action_id = message.action_id
        action_string = self._actions[action_id]
        action_strings = action_string.split("_")
        print action_strings

        #Identify if action doable (if life of all items>0)
        for str in action_strings:
            try:
                index=self._state_analyser._state_label.index("l_"+str)
            except ValueError:
                pass
            else:
                if not (self._state_analyser._state[index] > 0):
                    print "Dead item: "+str
                    mask = np.full(self._state_analyser._state.shape, False, dtype=bool)
                    mask[index] = True
                    message.state_mask = mask
                    message.reward = -1
                    self._rewarded_action_pub.publish(message)
                    return
        self._proposing_action = True
                    
        message_out = ContinuousAction()

        print len(self._state_analyser._state_label)
        print len(state_mask)
        print [self._state_analyser._state_label[i] for i,v in enumerate(state_mask) if v]
        if any(np.array(state_mask)==False):
            for str in [self._state_analyser._state_label[i] for i,v in enumerate(state_mask) if v]:
                for i,s in enumerate(str.split("_")):
                    if i>0 and s not in message_out.strings:
                        message_out.strings.append(s) 

        if len(action_strings)>1:
            message_out.header.frame_id = action_strings[1]
        else:
            message_out.header.frame_id = "sandtray"
        message_out.header.stamp = rospy.Time(0)
            
        if action_strings[0].startswith("mv"):
            goal = None
            if action_strings[1] in self._state_analyser._characters and (action_strings[2] in self._state_analyser._characters or action_strings[2] in self._state_analyser._targets):
                if action_strings[0] == ACTION_MOVE_TO:
                    goal = self._state_analyser.get_pose_around(action_strings[2])
                if action_strings[0] == ACTION_MOVE_CLOSE:
                    goal = self._state_analyser.get_pose_close_to(action_strings[1], action_strings[2])
                if action_strings[0] == ACTION_MOVE_AWAY:
                    goal = self._state_analyser.get_point_away(action_strings[1], action_strings[2])
                if goal == None:
                    print "error"
                    return
            else:
                return
            if action_strings[2] not in message_out.strings:
                message_out.strings.append(action_strings[2])

            print "origin "
            print self._state_analyser.get_pose(action_strings[1])
            print "destination "
            print goal
            goal = self._state_analyser.get_relative_pose(action_strings[1],goal)
            goal = goal.pose.position
            print "delta " 
            print goal

            message_out.pose.position.x = goal.x
            message_out.pose.position.y = goal.y
            message_out.pose.position.z = 0
            message_out.pose.orientation.x = 0
            message_out.pose.orientation.y = 0
            message_out.pose.orientation.z = 0
            message_out.pose.orientation.w = 1.
            message_out.type = action_string 
            self._proposed_action_pub.publish(message_out)
        if (action_strings[0] == ACTION_ATTENTION or action_strings[0] == ACTION_FELICITATION or 
            action_strings[0] == ACTION_ENCOURAGEMENT or action_strings[0] == ACTION_RULES):
            message_out.type = action_strings[0]
            self._proposed_action_pub.publish(message_out)

    def get_target(self, action, mask):
         masked_action = ma.array(action, mask = ~mask, dtype = int)
         return self._state_analyser.get_point_action(masked_action)

    def on_selected_action(self, message):
        self._proposing_action = False
        print "action selected"
        if len(self._actions) == 0:
            if not self.init_actions():
                return 
        item = message.header.frame_id
        mask = self.get_mask(message.strings)
        reward = message.reward
        trigger_mask = self.get_trigger_mask(message.strings)

        action = message.type 
        if message.type == "mv":
            action = self.get_action_move(item, message, message.strings)
        elif message.type == ACTION_ATTENTION:
            action = ACTION_ATTENTION+"_"+message.header.frame_id
            
        action = self._actions.index(action)

        self.publish_action(action, mask, trigger_mask, reward)

        if DEBUG:
            print mask
            print action_mask

    def init_actions(self):
        if not self._state_analyser._initialised:
            return False
        for o in self._state_analyser._characters+self._state_analyser._targets:
            self._actions.append(ACTION_ATTENTION + "_" + o)
        for c in self._state_analyser._characters:
            for o in self._state_analyser._characters + self._state_analyser._targets:
                self._actions.append(ACTION_MOVE_TO+"_"+c+"_"+o)
            for o in self._state_analyser._characters + self._state_analyser._targets:
                self._actions.append(ACTION_MOVE_CLOSE+"_"+c+"_"+o)
            for o in self._state_analyser._characters + self._state_analyser._targets:
                self._actions.append(ACTION_MOVE_AWAY+"_"+c+"_"+o)
        self._actions.append(ACTION_FELICITATION)
        self._actions.append(ACTION_ENCOURAGEMENT)
        self._actions.append(ACTION_RULES)
        return True

    def get_action_move(self, item, pose, strings):
        goal = self._state_analyser.get_absolute_pose(pose)
        if len(strings)<2:
            strings = self._state_analyser._characters + self._state_analyser._targets

        strings.remove(item)
        start_dist = [self._state_analyser.get_distance_objects(s, item) for s in strings]
        end_dist = [self._state_analyser.get_distance_item_pose(s, goal) for s in strings]
        if min(end_dist)<THRESHOLD_MOVE_TO:
            return ACTION_MOVE_TO+"_"+item+"_"+strings[np.argmin(end_dist)]
        index = np.argmin(end_dist)
        if end_dist[index]>start_dist[index]:
            return ACTION_MOVE_AWAY+"_"+item+"_"+strings[index]
        else:
            return ACTION_MOVE_CLOSE+"_"+item+"_"+strings[index]

    def get_mask(self, strings):
        mask = np.full(self._state_analyser._state.shape,True, dtype=bool)
        if len(strings) == 0:
            return mask
        
#        mask = [ v.startswith("d") for v in self._state_analyser._state_label]
#        for s in strings:
#            mask = [v.startswith("d") and (s in v.split("_") and mask[i]) or v.startswith("l") and (s in v.split("_") or mask[i]) for i,v in enumerate(self._state_analyser._state_label)]
        for idx,s in enumerate(self._state_analyser._state_label):
            l = s.split("_")
            mask[idx]=l[1] in strings
            if len(l)>2:
                mask[idx] = mask[idx] and l[2] in strings
        #if DEBUG:
            #print mask
        return mask

    def get_trigger_mask(self, strings):
        mask = np.full(self._state_analyser._trigger_state.shape,False, dtype=bool)
        for i,c in enumerate(self._state_analyser._characters):
            if c in strings:
                mask[i] = True
        mask[-3] = True
        mask[-2] = True
        mask[-1] = True
        return mask

    def publish_action(self, action, mask, trigger_mask, reward):
        message = DiscreteAction() 
        message.header.frame_id = REFERENCE_FRAME
        message.header.stamp = rospy.Time(0)
        message.action_id = action
        message.state_mask = mask
        message.trigger_mask = trigger_mask
        message.reward = reward
        self._rewarded_action_pub.publish(message)

    def run(self):
        rospy.spin()

    def on_event(self, event):
#        arguments = event.data.split("_")
#        if event.m
        pass

    def signal_handler(self, signal, frame):
        self._stopping = True
        self._state_analyser._stopping = True
        self._state_analyser._timer.cancel()
        sys.exit(0)
        
if __name__ == "__main__":

    rospy.init_node('action_analyser')

    rospy.loginfo("Initializing TF...")
    analyser= ActionAnalyser()
    signal.signal(signal.SIGINT, analyser.signal_handler)
    analyser.run()
