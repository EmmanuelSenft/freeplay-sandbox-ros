#!/usr/bin/env python
import numpy as np
import random
import signal
import sys

import math
import rospy
import tf
from threading import Event, Lock, Timer
import actionlib

from geometry_msgs.msg import PoseStamped, Point
from std_msgs.msg import String, Float32MultiArray
from visualization_msgs.msg import MarkerArray, Marker
from freeplay_sandbox_msgs.msg import ListIntStamped
import freeplay_sandbox_msgs
MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"

ITEMS = ["zebra","elephant","leopard","lion","giraffe","rhino","crocodile","hippo","toychild1","toychild4"]
ACTION_TYPES = ["move"]

COLORS = ["black","white","purple","blue","green","yellow","red"]

SPATIAL_THING = COLORS+ITEMS

class ActionAnalyser(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

        self._event_sub = rospy.Subscriber("events", String, self.on_event)
        self._selected_action_sub = rospy.Subscriber("sparc/selected_action",freeplay_sandbox_msgs.msg.ContinuousAction , self.on_selected_action)
        self._zones_sub = rospy.Subscriber("zones", MarkerArray, self.on_zones)

        self._proposed_action_sub = rospy.Subscriber("sparc/dis_action_proposed",freeplay_sandbox_msgs.msg.DiscreteAction, self.on_action_proposed)
        self._selected_action_pub = rospy.Publisher("sparc/dis_action_selected", freeplay_sandbox_msgs.msg.DiscreteAction, queue_size = 5)
        self._proposed_action_pub = rospy.Publisher("sparc/proposed_action", freeplay_sandbox_msgs.msg.ContinuousAction, queue_size = 5)

        self._zones={}
        self._zone_types = set()
        self._zoneslock = Lock()

    def on_action_proposed(self, message):
        data = message.data
        action = message.data[0]
        if action == ACTION_TYPES.index("move"):
            #Add closest
            target = self.get_point_in_zone(COLORS[data[2]],data[3])
            message = freeplay_sandbox_msgs.msg.ContinuousAction()
            message.header.frame_id = ITEMS[data[1]]
            message.header.stamp = rospy.Time(0)
            message.pose.position.x = target.x
            message.pose.position.y = target.y
            message.pose.position.z = 0
            message.pose.orientation.x = 0
            message.pose.orientation.y = 0
            message.pose.orientation.z = 0
            message.pose.orientation.w = 1.
            message.strings.append("zebra")
            message.strings.append("lion")
            self._proposed_action_pub.publish(message)

    def on_selected_action(self, message):
        item = message.header.frame_id
        pose = self.get_pose(item)
        if pose is None:
            return

        item_id = ITEMS.index(item)
        origin = self.isin_zone(pose)

        pose = self._tl.transformPose("sandtray", message)
        pose = pose.pose.position

        pose=pose.x, pose.y
        zone_type, zone_index = self.isin_zone(pose)
        closest = self.get_closest(item,pose, zone_type, zone_index)
        closest[0] = SPATIAL_THING.index(closest[0])
        closest[2] = SPATIAL_THING.index(closest[2])
        closest[4] = SPATIAL_THING.index(closest[4])
        if zone_type != -1:
            zone_type = SPATIAL_THING.index(zone_type)
        goal_state = [zone_type, zone_index]+closest    
        self.publish_action(ACTION_TYPES.index("move"),item_id, goal_state)

    def isin_zone(self, pose):
        if  pose is None:
            return -1,-1 
        pose = pose[0], pose[1]

        index = [0]
        for zone_type in enumerate(self._zone_types):
            if zone_type[1] in self._zones:
                if self.isin(pose, self._zones[zone_type[1]],index):
                    return zone_type[1],index[0]
        return -1,-1

    def isin(self, point, polygons, index=[0]):
        if point is None:
            return False

        x,y = point

        for idx, polygon in enumerate(polygons):
            n = len(polygon)
            inside = False

            p1x,p1y = polygon[0]
            for i in range (1,n+1):
                p2x,p2y = polygon[i % n]
                if y > min(p1y,p2y):
                    if y <= max(p1y,p2y):
                        if x <= max(p1x,p2x):
                            if p1y != p2y:
                                xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                                if p1x == p2x or x <= xinters:
                                    inside = not inside
                p1x,p1y = p2x,p2y
            if inside:
                index[0] = idx
                return True
        return False
 
    def get_closest(self, item,pose, zone_in_type, zone_in_index):
        distances=[]
        spatial_thing=[]
        for other_item in ITEMS:
            if other_item != item:
                distances.append(self.dist(self.get_pose(other_item), pose))
                spatial_thing.append([other_item,0])

        vectDist=np.vectorize(self.dist)

        for zone_type in enumerate(self._zone_types):
            if zone_type[1] in self._zones:
                for idx,polygon in enumerate(self._zones[zone_type[1]]):
                    if zone_type[1] == zone_in_type and zone_in_index == idx:
                        continue
                    spatial_thing.append([zone_type[1], idx])
                    d=[]
                    for point in polygon:
                        d.append(self.dist(point,pose))
                    distances.append(min(d))
        close_indexes =np.argpartition(distances,3)[:3]
        return spatial_thing[close_indexes[0]]+spatial_thing[close_indexes[1]]+spatial_thing[close_indexes[2]] 
 
    def publish_action(self, action_type, action_object, action_target):
        message = ListIntStamped()
        message.header.frame_id = REFERENCE_FRAME
        message.header.stamp = rospy.Time(0)
        message.data.append(action_type)
        message.data.append(action_object)
        for target in action_target:
            message.data.append(target)
        self._state_pub.publish(message)
        pass


    def get_pose(self, item, reference=REFERENCE_FRAME):
        if item not in self._tl.getFrameStrings():
            rospy.logwarn_throttle(20,"%s is not yet published." % item)
            return None
        if self._tl.canTransform(reference, item, rospy.Time(0)):
            (trans,rot) = self._tl.lookupTransform(reference, item, rospy.Time(0))
            return trans
        return None

    def run(self):
        rospy.spin()

    def on_event(self, event):
        pass

    def on_zones(self, zones):
        self._zoneslock.acquire()
        self._zones.clear()
        for zone in zones.markers:
            if zone.action == Marker.ADD:
                name = zone.ns.split("_")[-1]
                self._zone_types.add(name)
                rospy.loginfo("Adding/updating a %s zone" % name)
                self._zones.setdefault(name, []).append([(p.x,p.y) for p in zone.points])

        self._zoneslock.release()


    def dist(self, a, b=(0,0)):
        return pow(a[0]-b[0],2)+pow(a[1]-b[1],2)

    def get_point_in_zone(self, zone_type, zone_id, closeto=None):
        if len(self._zones) == 0 or len(self._zones[zone_type])==0:
            return None
        if zone_id == -1:
            regions = random.sample(self._zones[zone_type],len(self._zones[zone_type]))
        else:
            regions = self._zones[zone_type]
            regions = [regions[zone_id]]

        candidates = []
        for poly in regions:
            x=0;y=0;
            for p in poly:
                dx,dy = p
                x+=dx
                y+=dy
            candidates.append((x/len(poly), y/len(poly)))

        best_dist = 1000
        best_candidate = None

        for c in candidates:
            if closeto:
                d=dist(c,closeto)
                if d<best_dist:
                    best_dist =d
                    best_candidate = Point(x=c[0],y=c[1])
            else:
                return Point(x=c[0],y=c[1])

        return best_candidate

if __name__ == "__main__":

    rospy.init_node('action_analyser')

    rospy.loginfo("Initializing TF...")
    analyser= ActionAnalyser()
    analyser.run()
