#!/usr/bin/env python
import numpy
import random

import math
import rospy
import tf
from threading import Event
import actionlib

from geometry_msgs.msg import PoseStamped, Point
from std_msgs.msg import String
from visualization_msgs.msg import MarkerArray, Marker
import freeplay_sandbox_msgs.msg

MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"


class Player(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

        self._action_sub = rospy.Subscriber("sparc/selected_action", freeplay_sandbox_msgs.msg.ContinuousAction, self.on_action_received)
        self._event_sub = rospy.Subscriber("sandtray/interaction_events", String, self.on_event)

        self._motion = actionlib.SimpleActionClient('move_sandbox_items', freeplay_sandbox_msgs.msg.PlaygroundNavigationAction)
        self._speech_pub = rospy.Publisher("speech", String, queue_size = 5)
        self._poses_pub = rospy.Publisher("poses", PoseStamped, queue_size = 5)
        self._motion.wait_for_server()

        rospy.loginfo("Ready to play!")
        self.event_release = Event()
        self._moving_item = None

    def run(self):
        rospy.spin()

    def on_action_received(self,action):
        if action.type == "move":
            item = action.header.frame_id

            if self._moving_item is not None:
                self.event_release.clear()
                self._motion.cancel_goal()
                if self._moving_item != item:
                    self.event_release.wait()

            pose = self.get_pose(item)
            if pose is None: # frame not published yet!
                return
            pose = pose[0], pose[1]

            pose = self._tl.transformPose("sandtray", action)
            pose =  pose.pose.position
            self._moving_item = item
            print "sending " + item + " to " + str(pose.x) + " " + str(pose.y)
            goal = freeplay_sandbox_msgs.msg.PlaygroundNavigationGoal(item=action.header.frame_id,goal=pose)
            self._motion.send_goal(goal)

        if action.type == "att":
            item = action.header.frame_id
            self._speech_pub.publish(String("Look at the "+item.split("-")[0]))
            message = PoseStamped()
            message.header.frame_id = item
            message.header.stamp = rospy.Time.now()
            self._poses_pub.publish(message)

        if action.type == "fel":
            self._speech_pub.publish(String("Well done"))

        if action.type == "enc":
            self._speech_pub.publish(String("Keep going, you can do it"))

        if action.type == "rul":
            self._speech_pub.publish(String("Remember, you have to feed the animals to keep them alive"))

    def on_event(self,msg):
        if msg.data.startswith("robotrelease_"):
            self._moving_item = None
            self.event_release.set()

    def get_pose(self,item, reference=REFERENCE_FRAME):
        if item not in self._tl.getFrameStrings():
            rospy.logwarn_throttle(20,"%s is not yet published." % item)
            return None

        if self._tl.canTransform(reference, item, rospy.Time(0)):
            (trans,rot) = self._tl.lookupTransform(reference, item, rospy.Time(0))
        else:
            return None
        return trans

if __name__ == "__main__":

    rospy.init_node('woz_play')

    rospy.loginfo("Initializing TF...")
    player = Player()
    player.run()
