#!/usr/bin/env python
import numpy
import random

import math
import rospy
import tf
from threading import Event
import actionlib

from geometry_msgs.msg import PoseStamped, Point
from std_msgs.msg import String
from visualization_msgs.msg import MarkerArray, Marker
import freeplay_sandbox_msgs.msg

MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"


class Player(object):
    def __init__(self):
        self._init = False
        self._tl = tf.TransformListener()
        rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

        self._action_sub = rospy.Subscriber("sparc/selected_action", freeplay_sandbox_msgs.msg.ContinuousAction, self.on_action_received)
        self._description_sub = rospy.Subscriber("sparc/action_description", String, self.on_description)
        self._event_sub = rospy.Subscriber("sandtray/interaction_events", String, self.on_event)
        self._nao_event_sub = rospy.Subscriber("nao/events", String, self.on_nao_event)
        self._motion = actionlib.SimpleActionClient('move_sandbox_items', freeplay_sandbox_msgs.msg.PlaygroundNavigationAction)
        self._blocking_speech_pub = rospy.Publisher("nao/blocking_speech", String, queue_size = 5)
        self._poses_pub = rospy.Publisher("poses", PoseStamped, queue_size = 5)
        self._event_pub = rospy.Publisher("nao/events", String, queue_size = 5)
        self._motion.wait_for_server()

        rospy.loginfo("Ready to play!")
        self.event_release = Event()
        self._moving_item = None
        self._waiting_speech = None
        self._waiting_pointing = None
        self._sentences_congrats = ["Well done", "Excellent"]
        self._sentences_congrats_said = []
        self._sentences_encours = ["Keep going", "You can do it"]
        self._sentences_encours_said = []
        self._sentences_look = ["Look at the ", "What about the "]
        self._sentences_look_said = []
        self._sentences_move = ["Let's move the x y z ", "Look, the x wants to go y z "]
        self._sentences_move_said = []
        self._sentences_rules = ["Animals need to eat to stay alive." , "Move the animals to feed them."]
        self._sentences_rules_said = []
        self._init = True

    def run(self):
        rospy.spin()

    def on_action_received(self,action):
        if action.reward <= 0 or not self._init:
            return
        if action.type.startswith("mv"):
            item = action.header.frame_id

            if self._moving_item is not None:
                self.event_release.clear()
                self._motion.cancel_goal()
                if self._moving_item != item:
                    self.event_release.wait()

            pose = self.get_pose(item)
            if pose is None: # frame not published yet!
                return
            pose = pose[0], pose[1]

            pose = self._tl.transformPose("sandtray", action)
            pose =  pose.pose.position
            self._moving_item = item
            print "sending " + item + " to " + str(pose.x) + " " + str(pose.y)
            goal = freeplay_sandbox_msgs.msg.PlaygroundNavigationGoal(item=action.header.frame_id,goal=pose)
            self._motion.send_goal(goal)

        if action.type == "att":
            if self._moving_item is not None:
                self.event_release.clear()
                self._motion.cancel_goal()
            item = action.header.frame_id
            self._blocking_speech_pub.publish(String(self.one_among_many(self._sentences_look, self._sentences_look_said)+item.split("-")[0]))
            message = PoseStamped()
            message.header.frame_id = item
            message.header.stamp = rospy.Time(0)
            self._poses_pub.publish(message)
            self._waiting_pointing=action.type

        if action.type == "congrats":
            self.say_blocked(self.one_among_many(self._sentences_congrats, self._sentences_congrats_said), action.type)

        if action.type == "encour":
            self.say_blocked(self.one_among_many(self._sentences_encours, self._sentences_encours_said), action.type)

        if action.type == "rul":
            self.say_blocked(self.one_among_many(self._sentences_rules, self._sentences_rules_said), action.type)

    #To add description to a move
    def on_description(self, message):
        if not self._init:
            return
        lst = message.data.split("_")
        sentence = self.one_among_many(self._sentences_move, self._sentences_move_said)
        sentence = sentence.replace(" x ", " "+lst[1]+" ")
        motion = " to "
        if lst[0] == "mvc":
            motion = " close to "
        if lst[0] == "mva":
            motion = " away from "
        sentence = sentence.replace(" y ", motion)
        sentence = sentence.replace(" z "," the "+lst[2].split("-")[0]+" ")
        self._blocking_speech_pub.publish(String(sentence))

    def say_blocked(self, msg, action):
        self._blocking_speech_pub.publish(String(msg))
        self._waiting_speech = action

    def on_event(self,msg):
        if msg.data.startswith("robotrelease_"):
            self._moving_item = None
            self.event_release.set()

    def on_nao_event(self, msg):
        if msg.data == "blocking_speech_finished" and self._waiting_speech:
            self._event_pub.publish(String(self._waiting_speech + "_finished"))
            self._waiting_speech = None
        if msg.data == "pointing_finished" and self._waiting_pointing:
            self._event_pub.publish(String(self._waiting_pointing + "_finished"))
            self._waiting_pointing = None

    def get_pose(self,item, reference=REFERENCE_FRAME):
        if item not in self._tl.getFrameStrings():
            rospy.logwarn_throttle(20,"%s is not yet published." % item)
            return None

        if self._tl.canTransform(reference, item, rospy.Time(0)):
            (trans,rot) = self._tl.lookupTransform(reference, item, rospy.Time(0))
        else:
            return None
        return trans

    def one_among_many(self, sentences, indexes):
        if len(sentences) == len(indexes):
            del indexes[:]
        index = random.randint(0, len(sentences)-1)
        while index in indexes:
            index = random.randint(0, len(sentences)-1)
        indexes.append(index)
        return sentences[index]


if __name__ == "__main__":

    rospy.init_node('woz_play')

    rospy.loginfo("Initializing TF...")
    player = Player()
    player.run()
