#!/usr/bin/env python
import numpy as np
import numpy.ma as ma
import math
import time, threading
import operator

import rospy
from freeplay_sandbox_msgs.msg import DiscreteAction 
from std_msgs.msg import Int32MultiArray

DEBUG = False

class Actor(object):
    def __init__(self):
        self._state_sub = rospy.Subscriber("sparc/state", Int32MultiArray, self.on_state)
        self._reaction_timer = threading.Timer(2, self.select_action)
        self._action_sub = rospy.Subscriber("sparc/selected_action_dis",DiscreteAction, self.on_selected)
        self._action_pub = rospy.Publisher("sparc/proposed_action_dis", DiscreteAction, queue_size = 5)
        self._actions = []
        #self._masked_states=[]
        #self._masked_actions=[]
        self._has_moved = False
        self._moving_Timer = threading.Timer(10, self.reset_has_moved)
        self._state = None
        self._proposed_action = None

    def on_state(self, message):
        dimension = [message.layout.dim[0].size, message.layout.dim[1].size]
        current_state =  np.zeros(shape=(dimension[0],dimension[1]))

        for i in range(0, dimension[0]):
            for j in range(0,dimension[1]):
                current_state[i,j] = message.data[dimension[1]*i+j]

    ##    if self._state is None:
        self._state = current_state
        if current_state[-1] == 10 and current_state[-2] == 0 and current_state[-3] == False:
            self.select_action()

#        if np.any(self._state != current_state):
 #           if not self._reaction_timer.is_alive() and not self._moving_Timer.is_alive():
  #              self._reaction_timer.start()
   #         self._state = current_state
    def on_selected(self, message):
        self.on_action(message, 1)

    def on_cancelled(self, message):
        print "cancelling"
        self.on_action(message,-1)

    def on_action(self, message, reward):
        print "received action"
        action = message.data
        mask = np.zeros(self._state.shape,dtype = bool)
        for i in range(0, self._state.shape[0]):
            for j in range(0, self._state.shape[1]):
                mask[i,j]=message.mask[i*self._state.shape[1]+j]
        masked_state = ma.array(self._state, mask = ~mask, dtype = int)
        if DEBUG:
            print "masked state"
            print masked_state
        for known_action in self._actions:
            if known_action._action == action:
                known_action._states.append(masked_state)
                known_action._rewards.append(reward)
                break
        else:
            new_action = Action(action, masked_state, reward)
            self._actions.append(new_action)
        self._proposed_action = None

    #could do something with distance and value: general vs precise
    def get_similarity_states(self, state1, state2):
        if DEBUG:
            print state1==state2
        distance = np.mean(state1[:-2]==state2[:-2])
        if distance is ma.masked:
            distance = 0.5
        return distance

    def select_action(self):
        if DEBUG:
            print "selecting action"
        n = len(self._masked_states)
        if n != 0:
            state = self._state

            #can be optimised
            dmin = self.get_distance_state(state, self._masked_states[0])
            index = 0

            for i in range(n):
                if DEBUG:
                    print self._masked_actions[i]
                d= self.get_distance_state(state, self._masked_states[i])
                if d<dmin:
                    dmin = d
                    index = i
                
            action = self._masked_actions[index]
            mask = (state == self._masked_states[index].data) & ~self._masked_states[index].mask
            if DEBUG:
                print action
                print mask
            message = DiscreteAction()
            message.header.frame_id = "sandtray"
            message.header.stamp = rospy.Time(0)
            for i in action.data:
                message.data.append(int(i))
            for i in action.mask:
                message.maskAction.append(bool(not i))
            for i in mask.flatten():
                message.mask.append(bool(i))

            self._action_pub.publish(message)
            self._has_moved = True
            self._moving_Timer.start()

        self._reaction_timer = threading.Timer(2, self.select_action)

    def reset_has_moved(self):
        self._has_moved = False
        self._moving_Timer = threading.Timer(10, self.reset_has_moved)

    def run(self):
        rospy.spin()

class Action(object):
    def __init__(self, act, state, reward):
        self._action = act
        self._states = [state]
        self._rewards = [reward]

if __name__ == "__main__":
    rospy.init_node('actor')
    actor = Actor()
    actor.run()
