#!/usr/bin/env python

import random

import math
import rospy
import tf

from threading import Lock

import actionlib

from std_msgs.msg import Empty
from geometry_msgs.msg import PoseStamped, Point
from visualization_msgs.msg import MarkerArray, Marker
import freeplay_sandbox_msgs.msg

ANIMAL_PLACEMENT=0
BLOCK_PLACEMENT=1
GAME_ACTIONS=[ANIMAL_PLACEMENT, BLOCK_PLACEMENT]

MAP_HEIGHT=0.335

REFERENCE_FRAME="/sandtray"

BLOCKS_SLOTS=[(0.358,-0.259),(0.098,-0.160),(0.431,-0.198),(0.537,-0.316),(0.435,-0.015),(0.510,-0.121),(0.121,-0.019),(0.519,-0.222),(0.213,-0.189),(0.261,-0.171),(0.439,-0.063),(0.296,-0.204),(0.177,-0.309),(0.087,-0.318),(0.477,-0.197),(0.084,-0.102),(0.188,-0.261),(0.138,-0.187),(0.535,-0.268),(0.133,-0.328),(0.388,-0.222),(0.562,-0.125),(0.039,-0.087),(0.052,-0.161),(0.025,-0.199),(0.026,-0.244),(0.223,-0.243),(0.361,-0.309),(0.117,-0.063),(0.278,-0.248),(0.178,-0.215),(0.042,-0.298),(0.465,-0.102)]


ZONES={}

EPSILON_TO_BLOCK_SLOT=0.02

# hold: cube_XX: (x,y,on_slot[bool])
blocks_positions={}

ANIMALS = ["zebra","elephant","leopard","lion","giraffe","rhino","crocodile","hippo"]
HABITATS = {"zebra": ["yellow", "green"],
            "elephant": ["green"],
            "leopard": ["yellow"],
            "lion": ["yellow"],
            "giraffe": ["yellow", "green"],
            "rhino": ["green"],
            "crocodile": ["blue"],
            "hippo": ["blue"]
            }


tl=None

play_enabled = True

zoneslock = Lock()

def on_drawing(msg):
    global play_enabled

    play_enabled = not play_enabled
    rospy.loginfo("Play enabled: %s" % str(play_enabled))

def on_zones_received(msg):

    zoneslock.acquire()

    ZONES.clear()
    for m in msg.markers:
        if m.action == Marker.ADD:
            name = m.ns.split("_")[-1]
            rospy.loginfo("Adding/updating a %s zone" % name)
            ZONES.setdefault(name, []).append([(p.x,p.y) for p in m.points])

    zoneslock.release()

def get_pose(item, reference=REFERENCE_FRAME):

    if item not in tl.getFrameStrings():
        rospy.logwarn_throttle(20,"%s is not yet published." % item)
        return None

    if tl.canTransform(reference, item, rospy.Time(0)):
        (trans,rot) = tl.lookupTransform(reference, item, rospy.Time(0))
    else:
        return None

    return trans

def reachable(pose):
    """
    Check whether a given pose is reachable by the robot.
    If the 'arm_reach' frame is not available, returns 0.
    """
    arm_reach = get_pose(ARM_REACH_FRAME)
    if arm_reach is None:
        return True
    x,y,z = arm_reach

    return dist((x,y), pose) < z # by convention, 'z' is the radius of the reachable zone at sandtray's level


def update_blocks_poses():
    global blocks_positions

    blocks_positions={}
    for f in tl.getFrameStrings():
        if "cube_" in f:

            if tl.canTransform(REFERENCE_FRAME, f, rospy.Time(0)):
                (trans,rot) = tl.lookupTransform(REFERENCE_FRAME, f, rospy.Time(0))
            else:
                continue

            x, y = trans[0], trans[1]

            blocks_positions[f] = (x,y, is_on_slot((x,y)))

def is_on_slot(point):
    for slot in BLOCKS_SLOTS:
        if dist(slot, point) < EPSILON_TO_BLOCK_SLOT:
            return True
    return False

def get_empty_slot(close_to=None):

    if close_to:
        slots = sorted(BLOCKS_SLOTS, cmp=lambda x, y: cmp(dist(x, close_to), dist(y, close_to)))
    else:
        slots = random.sample(BLOCKS_SLOTS, len(BLOCKS_SLOTS))

    for slot in slots:

        if not reachable(slot):
            continue

        slot_occupied=False

        for k,v in blocks_positions.items():
            if dist(slot,(v[0],v[1])) < EPSILON_TO_BLOCK_SLOT:
                slot_occupied=True
                break

        if not slot_occupied:
            return slot

    return None


def find_closest_block(p):

    x,y=p
    closest=None
    shortest_distance=10000

    for k, v in blocks_positions.items():

        # block out of reach	
        if not reachable((v[0], v[1])):
            continue

        if v[2]: # the block is already on a slot
            continue

        if dist(p,(v[0],v[1])) < shortest_distance:
            closest=k
            shortest_distance=dist(p,v)

    return closest



def isin(point,polygons):
    """
    Determines if a 2D point is inside a given list of 2D polygon or not.
    
    :param point: a (x,y) pair
    :param polygon: a list of a lists of (x,y) pairs.
    
    Based on http://paulbourke.net/geometry/polygonmesh/
    """

    if point is None:
        return False

    x,y = point

    for polygon in polygons:
        n = len(polygon)
        inside =False

        p1x,p1y = polygon[0]
        for i in range(1,n+1):
            p2x,p2y = polygon[i % n]
            if y > min(p1y,p2y):
                if y <= max(p1y,p2y):
                    if x <= max(p1x,p2x):
                        if p1y != p2y:
                            xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                            if p1x == p2x or x <= xinters:
                                inside = not inside
            p1x,p1y = p2x,p2y

        if inside:
            return True

    return False

def dist(a, b=(0,0)):

    return math.sqrt(math.pow(a[0] - b[0],2) + math.pow(a[1]-b[1],2))


def get_point_in_zone(zone, closeto=None):
    if len(ZONES) == 0 or len(ZONES[zone]) == 0:
        return None

    # randomize regions
    regions = random.sample(ZONES[zone], len(ZONES[zone]))

    candidates = []

    for poly in regions:

        x=0; y=0
        for p in poly:
            dx, dy = p
            x+=dx
            y+=dy

        candidates.append( (x/len(poly), y/len(poly)) )


    best_dist = 1000
    best_candidate = None

    for c in candidates:
        if closeto:
            d = dist(c, closeto)
            if d < best_dist and reachable(c):
                best_dist = d
                best_candidate = Point(x=c[0], y=c[1])
        else:
            if reachable(d):
                return Point(x=c[0], y=c[1])

    return best_candidate

def place_random_animal():

    # randomize the list of animals
    animals = random.sample(ANIMALS, len(ANIMALS))

    for animal in animals:

        pose = get_pose(animal)
        if pose is None: # frame not published yet!
            continue
        pose = pose[0], pose[1]

        # animal out of reach
        if not reachable(pose):
            continue

        if animal not in HABITATS:
            continue

        zones = HABITATS[animal]
        zones_poly = []

        zoneslock.acquire()

        for zone in zones:
            zones_poly += ZONES[zone]

        zoneslock.release()


        if not isin(pose, zones_poly):

            zoneslock.acquire()
            target=get_point_in_zone(random.choice(zones), closeto=pose)
            zoneslock.release()

            # maybe the zone is not reachable?
            if not target:
                continue

            rospy.loginfo("Sending %s to %s" % (animal, zone))
            goal = freeplay_sandbox_msgs.msg.PlaygroundNavigationGoal(item=animal,goal=target)
            motion.send_goal(goal)
            motion.wait_for_result()
    
            return True, pose

    return False, None

def place_block(close_to=None):

    update_blocks_poses()

    if len(blocks_positions) == 0:
        # No block!
        return False, None

    slot = get_empty_slot(close_to)
    if not slot:
        rospy.loginfo("All block slots occupied!")
        return False, None

    block = find_closest_block(slot)

    if not block:
        rospy.loginfo("No reachable block")
        return False, None

    rospy.loginfo("Closest block is %s" % block)

    p = Point(x=slot[0], y=slot[1])
    goal = freeplay_sandbox_msgs.msg.PlaygroundNavigationGoal(item=block,goal=p)
    motion.send_goal(goal)
    motion.wait_for_result()

    return True, slot



if __name__ == "__main__":

    rospy.init_node('sandbox_player')
    ARM_REACH_FRAME = rospy.get_param('~arm_reach_frame', "arm_reach")

    rospy.loginfo("Initializing TF...")
    tl = tf.TransformListener()
    rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

    zones_sub = rospy.Subscriber("zones", MarkerArray, on_zones_received);
    drawing_sub = rospy.Subscriber("sandtray_drawing", Empty, on_drawing);

    rospy.loginfo("Waiting for move_sandbox_items action server...")
    motion = actionlib.SimpleActionClient('move_sandbox_items', freeplay_sandbox_msgs.msg.PlaygroundNavigationAction)
    motion.wait_for_server()

    rospy.loginfo("Ready to play!")

    last_pose=None
    action_idx=0

    while not rospy.is_shutdown():
 
        if play_enabled:
            current_action = GAME_ACTIONS[action_idx]

            if current_action == ANIMAL_PLACEMENT:
                ok, last_pose = place_random_animal()
            elif current_action == BLOCK_PLACEMENT:
                ok, last_pose = place_block(last_pose)

            if ok:
                rospy.sleep(random.uniform(1.2,2.5))
            else:
                rospy.sleep(0.3)

            chance = random.random()
            if not ok or chance > 0.9:
                rospy.loginfo("Switching to next game action")
                action_idx= (action_idx+1) % len(GAME_ACTIONS)

        else:
            rospy.sleep(0.3)

